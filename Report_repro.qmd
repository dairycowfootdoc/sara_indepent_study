---
title: "Report_Template"
editor: source
format: 
 html:
   embed-resources: true
   toc: true
   toc-location: left
execute:
    echo: false
    message: false
    warning: false
---

```{r}
library(tidyverse)
library(arrow)
library(dtplyr)
library(DT)
library(survival)
library(survminer)
library(stringr)
library(viridis)
library(RColorBrewer)
library(flextable)
library(officer)
library(gtsummary)
library(cardx)
library(htmltools)
library(lubridate)
library(httr)
library(jsonlite)
library(gt)
library(scales)


# Initialization and organization of initial data sets

source('functions/DT_base.R') #functions to parse remarks and protocols

# Intialize animal and animal lactation file and assign data pull date to an object for later use.
animals <- read_parquet('data/intermediate_files/animals.parquet')

animal_lactations<-read_parquet('data/intermediate_files/animal_lactations.parquet') 

pull_date <- unique(animals$data_pull_date_max)

date_start <- pull_date - 365 # pulls last year of data, modify for specific project
date_end <- pull_date

events_formatted <-read_parquet('data/intermediate_files/events_formatted.parquet')

# Pull the wanted information into a new data sets (double check in DC that the events are actually being recorded under these event names)

# Mastitis
mastitis_data <- events_formatted %>%
  filter(event %in% c("MAST"))

# Lameness
lame_data <- events_formatted %>%
  filter(event %in% c("LAME"))

# Reroduction
repro_data <- events_formatted %>%
  filter(event_type %in% c("repro"))%>%
  select(id_animal, id_animal_lact, date_birth, lact_number, event, date_event, dim_event, R)

vwp <- 50 # Set to herd's VWP

# Youngstock
youngstock_data <- events_formatted%>%
  filter(lact_number == 0)

# Pull production data from dairy comp and re-format:
# EVENTS ID BDAT LACT\4S730 (730 = last 2 years of data, change based on goals)
# Save in data/intermediate_files/production_data. It should be the only file in there

# Define file path
production_file <- "data/intermediate_files/production_data/production.parquet"

# # Read Parquet file
# production_data <- read_parquet(production_file)
# 
# # # Reformat the data
# production_data <- production_data %>%
#   mutate(
#     id_animal = paste0(as.character(ID), "_", as.character(BDAT)) #Create id_animal
#   ) %>%
#   rename(id = ID) %>%
#   rename(date_birth = BDAT)%>%
#   rename(date_test = TestDate) %>%
#   mutate(date_test = mdy(date_test))%>% # Convert to Date (Adjust format if needed)
#   relocate(id_animal, .before = everything())  # Move id_animal to the first column



```



# Reproduction

```{r}
# 21 Day Preg Risk
date_end <- pull_date

# Create periods (21-day intervals) - use negative 21 to get it to start with date_end and rev to make biggest number most recent

# set up new date_start so catch more DNB cows
date_start_repro = date_start-365

periods <- rev(seq(to = date_start_repro, from = date_end, by = "-21 days"))

# Ensure lact_number > 0 and only repro events that affect elig.
repro_data <- repro_data %>%
  filter(lact_number > 0, event %in% c("PREG", "ABORT", "BRED", "OK", "OPEN", "DNB"))

# Assign time periods to repro data
repro_data <- repro_data %>%
  mutate(
    period_number = findInterval(date_event, periods, rightmost.closed = TRUE),
    period_start_date = periods[pmax(period_number, 1)], 
    period_end_date = period_start_date + 20,  
    period_end_date = case_when(
      period_end_date > date_end ~ date_end,  # Reset if > date_end
      TRUE ~ period_end_date  # Otherwise, keep the calculated end date
    )
  )

# set up animal data
animals_repro <- animal_lactations %>% 
  filter(lact_number > 0) %>%
  filter(lact_number != 32) |> 
  filter(date_archive >= date_start_repro | is.na(date_archive)) %>% 
  select(id_animal_lact, date_fresh, date_archive) 

# Create row for every animal in every period
all_periods <- animals_repro %>%
  distinct(id_animal_lact) %>%  # Get unique id_animal_lact
  mutate(id_animal_lact = as.character(id_animal_lact)) %>%  # Ensure it's character type for joining
  crossing(period_start_date = periods) %>%  # Cross join with periods to get 18 rows per id_animal_lact
  mutate(
    period_end_date = period_start_date + 20,  # Assign 21-day period
    period_number = match(period_start_date, periods)  # Assign period number based on periods vector
  )

# Merge with existing animal_repro data
animals_repro <- all_periods %>%
  left_join(animals_repro, by = c("id_animal_lact")) %>%
  group_by(id_animal_lact) %>%
  fill(date_fresh, date_archive, .direction = "downup") %>%  # Ensure lact info is copied
  ungroup()

# Ensure data is sorted by animal and period
animals_repro <- animals_repro %>%
  arrange(id_animal_lact, period_start_date) %>% 
  mutate(date_vwp = date_fresh + vwp)

# set up event data 
events_filtered <- events_formatted %>%
  filter(event %in% c("PREG", "ABORT"))

# Set up event data with period information (matching the structure of animals_repro)
events_filtered <- events_filtered %>%
  left_join(
    animals_repro %>%
      select(id_animal_lact, period_number, period_start_date, period_end_date),
    by = c("id_animal_lact")
  ) 

events_filtered <- events_filtered %>%
  filter(date_archived > date_start_repro | is.na(date_archived)) |> 
  filter(lact_number !=32)

# Get the latest PREG and ABORT event before each period_start_date
latest_preg_events <- events_filtered %>%
  filter(event == "PREG") %>% 
  group_by(id_animal_lact, period_start_date) %>%
  slice_max(date_event, n = 1) %>%  
  rename(latest_preg_event = date_event) %>%  
  ungroup()

# Get the most recent ABORT event for each animal in each period
latest_abort_events <- events_filtered %>%
  filter(event == "ABORT") %>%  
  group_by(id_animal_lact, period_start_date) %>%
  slice_max(date_event, n = 1) %>%  
  rename(latest_abort_event = date_event) %>%  
  ungroup()

latest_events <- latest_preg_events %>%
  left_join(
    latest_abort_events %>% select(id_animal_lact, period_start_date, latest_abort_event),  # Only keep relevant columns from latest_abort_events
    by = c("id_animal_lact", "period_start_date")
  )

# Merge the latest PREG and ABORT event dates back into animals_repro
animals_repro_test <- animals_repro %>%
  left_join(
    latest_events %>%
      select(id_animal_lact, period_number, 
             latest_preg_event, latest_abort_event,
             date_concieved),  
    by = c("id_animal_lact", "period_number")  # Match on id_animal_lact and period_number
  )

# Merge data - assign events to animal and period
animals_repro_2 <- animals_repro_test %>%
  left_join(
    repro_data %>% 
      select(id_animal_lact, period_start_date, event, R, 
             period_number, period_end_date), 
    by = c("id_animal_lact", "period_start_date", "period_end_date", "period_number")
  )


# If results column is P asign 1, if date_conceived is before period_end_date, asign P
# Are cows that abort pregnant before so count as numerator for a bit or just get back tracked to open so not counted in retro calc? (5970)
animals_repro_gc <- animals_repro_2 |> 
  mutate(pregnant_status = case_when(R == "P" ~ 1,
                                      # this fills things so no need to fill and addresses duplicated events in same time window for example cow 10
                                      date_concieved <= period_end_date ~ 1,
                                      .default = 0))


# VWP logic, if VWP date is < period end date than eligible at some point in period so assign 1
animals_repro_gc2 <- animals_repro_gc %>%
  mutate(
    vwp_status = case_when(
      is.na(date_vwp) ~ NA_real_,  # If date_vwp is NA, return NA (you can change this to any default value you want)
      date_vwp <= period_end_date ~ 1,
      date_vwp > period_end_date ~ 0,
      TRUE ~ NA_real_  # You can handle any edge cases if necessary
    )
  )

# If Bred in period bred_status = 1, if DNB event in period dnb_status = 1. Carry down dnb_status for future periods. Only one row per cow per period. Get rid of cows archived before the start of the period.
animals_repro_gc3 <- animals_repro_gc2 %>% 
  lazy_dt() |> 
  group_by(id_animal_lact, period_end_date) %>%
  # if there is a bred event in the time period she is bred (1)
  mutate(
    bred_status = ifelse(any(event == "BRED" & !is.na(event) & 
                               event != ""), 1, 0),
    # create dnb status for later
    dnb_status = if_else(any(event == "DNB" & !is.na(event) &
                               event != ""), 1,0)
    ) %>%
  ungroup() |> 
  # need to make DNB status 1 after previous DNB
  group_by(id_animal_lact) |> 
  arrange(period_number) |> 
  mutate(dnb_status = cummax(dnb_status)) |> 
  ungroup() |> 
  # get rid of duplicats in periods due to multiple events during time period
  distinct(id_animal_lact, period_number, .keep_all = TRUE) |> 
  # get rid of timeperiods after archive date
  filter(period_start_date <= date_archive | is.na(date_archive)) |> 
  as_tibble()
  

# too many cows still
# problems some cows dnb's before start of 1 year back so need to classify cows earlier then the time period of interest example cow 262

eligible_cows <- animals_repro_gc3 %>%
  # Filter cows that are after VWP and not pregnant
  filter(vwp_status == 1, pregnant_status == 0 & dnb_status == 0) |> 
  mutate(eligibility_status = 1)


#Create eligibility data set that only has one entry per cow per period with eligibiity status
eligible_cows_gc <- eligible_cows %>% 
  filter(eligibility_status == 1) %>%
  select(id_animal_lact, period_number, period_start_date, period_end_date, eligibility_status) %>%
  group_by(id_animal_lact, period_number) %>%
  mutate(
    eligibility_status = if_else(all(eligibility_status == 1), 1, 0)
  ) %>%
  distinct(id_animal_lact, period_number, .keep_all = TRUE) %>%
  ungroup()


# Count eligible per period and lactation group
eligibility_long <- eligible_cows_gc %>% 
  mutate(lact_number = sub(".*_(\\d+)$", "\\1", id_animal_lact)) %>%  # Extract lact_number from id_animal_lact
  group_by(period_number, lact_number) %>%  # Group by period_number and lactation group
  summarise(total_eligible = n(), .groups = "drop")

# Create eligibility Table
eligible_cows_summary <- eligible_cows %>%
  filter(eligibility_status == 1) %>%
  mutate(lact_number = sub(".*_(\\d+)$", "\\1", id_animal_lact)) %>%  # Extract lact_number from id_animal_lact
  group_by(period_number, lact_number) %>%
  summarise(total_eligible_cows = n(), .groups = "drop") %>%
  pivot_wider(names_from = lact_number, values_from = total_eligible_cows, values_fill = list(total_eligible_cows = 0)) %>%
  mutate(total = rowSums(select(., -period_number), na.rm = TRUE))  # Add total column

# merge back time periods
time_periods <- eligible_cows |> 
  select(period_number, period_start_date) |> 
  distinct()

# to find out how compares DC
# last 2 windows is are to high and last one is not relevant
# other seems ok or would be if DNB's were accounted for earlier
eligible_no <- eligible_cows_summary |> 
  left_join(time_periods) |> 
  select(period_start_date, everything())



#      *Number Pregnant Logic:*

# Count the number of breedings that resulted in a pregnancy per period and lactation group
pregnant_counts_by_period <- animals_repro_gc3 %>%
  filter(event == "BRED" & R %in% c("P", "A", "C")) %>% 
  mutate(lact_number = sub(".*_(\\d+)$", "\\1", id_animal_lact)) %>%  
  group_by(period_number, period_start_date, lact_number) %>% 
  summarise(total_pregnancies = n(), .groups = "drop") 



preg_risk_long <- pregnant_counts_by_period %>%
  inner_join(eligibility_long, by = c("period_number", "lact_number")) %>%
  mutate(pregnancy_risk = total_pregnancies / total_eligible) %>%
  replace_na(list(pregnancy_risk = 0))  # Ensure no NAs
```

21-Day PR

```{r}


# Create lact_group +3
preg_risk_lact_group <- preg_risk_long %>%
  mutate(
    lact_group = case_when(
      lact_number == 1 ~ "1",
      lact_number == 2 ~ "2",
      lact_number >= 3 ~ "3+"
    )
  ) %>%
  group_by(period_number, period_start_date, lact_group) %>%
  summarise(
    total_pregnancies = sum(total_pregnancies, na.rm = TRUE),
    total_eligible = sum(total_eligible, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(pregnancy_risk = total_pregnancies / total_eligible) %>%
  replace_na(list(pregnancy_risk = 0)) 

preg_risk_plot_data <- preg_risk_lact_group %>%
  filter(lact_group == 1, period_start_date >= date_start, period_start_date <= date_end-21)

lowest_points <- preg_risk_plot_data %>%
  filter(pregnancy_risk == min(pregnancy_risk, na.rm = TRUE))

ggplot(preg_risk_plot_data, aes(x = period_start_date, y = pregnancy_risk)) +
  geom_line(color = "blue", size = 1) +  # Line plot
  geom_point(color = "red", size = 2) +  # Points on line
  geom_text(data = lowest_points, aes(label = period_start_date),
            color = "black", size = 4, vjust = -1) +  # Adding labels to lowest points
  labs(
    title = "Pregnancy Risk Over Time (Lactation 1)",
    x = "Period Start Date",
    y = "Pregnancy Risk (%)"
  ) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +  # Format y-axis as %
  theme_minimal()

```

```{r}
preg_risk_plot_data <- preg_risk_lact_group %>%
  filter(lact_group == 2, period_start_date >= date_start, period_start_date <= date_end-21)

lowest_points <- preg_risk_plot_data %>%
  filter(pregnancy_risk == min(pregnancy_risk, na.rm = TRUE))

ggplot(preg_risk_plot_data, aes(x = period_start_date, y = pregnancy_risk)) +
  geom_line(color = "blue", size = 1) +  # Line plot
  geom_point(color = "red", size = 2) +  # Points on line
  geom_text(data = lowest_points, aes(label = period_start_date),
            color = "black", size = 4, vjust = -1) +  # Adding labels to lowest points
  labs(
    title = "Pregnancy Risk Over Time (Lactation 2)",
    x = "Period Start Date",
    y = "Pregnancy Risk (%)"
  ) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +  # Format y-axis as %
  theme_minimal()
```

```{r}
preg_risk_plot_data <- preg_risk_lact_group %>%
  filter(lact_group == "3+", period_start_date >= date_start, period_start_date <= date_end-21)

lowest_points <- preg_risk_plot_data %>%
  filter(pregnancy_risk == min(pregnancy_risk, na.rm = TRUE))

ggplot(preg_risk_plot_data, aes(x = period_start_date, y = pregnancy_risk)) +
  geom_line(color = "blue", size = 1) +  # Line plot
  geom_point(color = "red", size = 2) +  # Points on line
  geom_text(data = lowest_points, aes(label = period_start_date),
            color = "black", size = 4, vjust = -1) +  # Adding labels to lowest points
  labs(
    title = "Pregnancy Risk Over Time (Lactation 3+)",
    x = "Period Start Date",
    y = "Pregnancy Risk (%)"
  ) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +  # Format y-axis as %
  theme_minimal()
```


# GC alternative

```{r}


# Create lact_group +3
preg_risk_lact_group <- preg_risk_long %>%
  mutate(
    lact_group = case_when(
      lact_number == 1 ~ "1",
      lact_number == 2 ~ "2",
      lact_number >= 3 ~ "3+"
    )
  ) %>%
  group_by(period_number, period_start_date, lact_group) %>%
  summarise(
    total_pregnancies = sum(total_pregnancies, na.rm = TRUE),
    total_eligible = sum(total_eligible, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(pregnancy_risk = total_pregnancies / total_eligible) %>%
  replace_na(list(pregnancy_risk = 0)) 

preg_risk_plot_data <- preg_risk_lact_group %>%
  filter(period_start_date >= date_start-43, period_start_date <= date_end-43)

range <- range(preg_risk_plot_data$period_start_date)

lowest_points <- preg_risk_plot_data %>%
  filter(pregnancy_risk == min(pregnancy_risk, na.rm = TRUE))

ggplot(preg_risk_plot_data, 
       aes(x = period_start_date, y = pregnancy_risk,
           colour = lact_group,
           fill = lact_group)) +
  geom_point()+
  geom_smooth(alpha = 0.3)+
  geom_text(data = lowest_points, aes(label = period_start_date),
            color = "red", size = 4, vjust = -1) +  # Adding labels to lowest points
  theme_minimal()+
  labs(
    title = "Pregnancy Risk Over Time",
    x = "",
    y = "Pregnancy Risk (%)"
  ) +
  scale_x_date(date_breaks = "21 days",
               date_labels = "%b %d",
               limits = range)+
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +  # Format y-axis as %
  scale_colour_viridis_d()+
  scale_fill_viridis_d()+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  guides(color = guide_legend(title = "Lactation Group",
                              position = "bottom"),
         fill = "none")
 
```
