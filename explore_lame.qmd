---
title: "Explore Events"
editor: source
format: 
 html:
   embed-resources: true
   toc: true
   toc-location: left
execute:
    echo: false
    message: false
    warning: false
---

```{r}
library(tidyverse)
library(arrow)
library(dtplyr)
library(DT)

source('functions/DT_base.R') #functions to parse remarks and protocols

events_formatted<-read_parquet('data/intermediate_files/events_formatted.parquet') |> 
  filter(event %in% c("LAME", "FOOTRIM")) |> 
  filter(date_event > "2024-01-01")

summarize_events<-events_formatted |> 
  group_by(event, protocols_remaining_after_numbers1) |> 
  summarize(count_rows=sum(n()))|>
  ungroup()%>%
  mutate(event_type = factor(protocols_remaining_after_numbers1), 
         Event = factor(event),
         event_type = if_else(is.na(event_type), "Trim Only", event_type))

```

# Summary Graph
```{r}
#| fig-height: 8
# count y vars

facet_order <- summarize_events %>%
  group_by(event_type) %>%
  summarise(n_y = n_distinct(event)) %>%
  arrange(desc(n_y)) %>%  # Order by most y categories
  pull(event_type)

# order events
summarize_events <- summarize_events %>%
  mutate(event_type = fct_reorder(event_type, count_rows, .fun = sum, .desc = FALSE)) 

  ggplot(summarize_events)+
  geom_bar(aes(x = event_type,
               y = count_rows, fill = event_type), stat = "identity")+
  #facet_wrap(factor(event, levels = facet_order) ~., scales = 'free')+
    facet_wrap(vars(event), ncol = 1, scales = "free")+
  coord_flip()+
  scale_fill_viridis_d()+
  theme_minimal()+
  labs(x = "",
       y = "Row Count")+
  theme(legend.position = "none",
        # axis.text.y = element_text(size = 6)
        )
```

# Table of events

```{r}
fxn_DT_base(summarize_events)
```




