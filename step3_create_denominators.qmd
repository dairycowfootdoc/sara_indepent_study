---
title: "Disease Template"
format: html
editor: source
---

```{r}
library(tidyverse)
library(arrow)
library(dtplyr)

source('functions/DT_base.R')

```

```{r}
#denominator base files -------------------
animals<-read_parquet('data/intermediate_files/animals.parquet') #each row is an animal

animal_lactations<-read_parquet('data/intermediate_files/animal_lactations.parquet') #each row is an animal lactation

#numerator base files long ----------------------each row is a unique disease event (gapx_key)
disease_animal_long<-read_parquet('data/intermediate_files/disease_animal_level_long.parquet')

disease_lact_long<-read_parquet('data/intermediate_files/disease_lactation_level_long.parquet')

#numerator base files long ---------each row is a an animal or animal lact with diseases in wide format
disease_animal_wide<-read_parquet('data/intermediate_files/disease_animal_level_wide.parquet')

disease_lact_wide<-read_parquet('data/intermediate_files/disease_lactation_level_wide.parquet')

#---------------------------
data_pull_min<-min(animals$data_pull_date_min)
data_pull_max<-max(animals$data_pull_date_max)
```


## Denominator - use phase distribution

### Calander Time
```{r}
calander<-tibble(
  calander_date = seq.Date(from = max(disease_lact_long$date_disease_last)-(365*3), 
                           to = max(disease_lact_long$date_disease_last), 
                           by = 'day')
)
```



### Define Global parameters for inclusion

```{r}

#age in days at pull date
param_animal_age_min<-0
param_animal_age_max<-365*15 #15 yr old cows max

#lactation number
param_lactation_min<-0
param_lactation_max<-25

#time period of interest
param_time_period_start<-data_pull_min #this is a default, modify as needed but it must be a date
param_time_period_end<-data_pull_max #this is a default, modify as needed but it must be a date


#-------------------------------------------------
fxn_apply_global_params_animal<-function(df){
  df%>%
    #get age at time period of interest
    mutate(age_at_time_period_start = as.numeric(param_time_period_start-date_birth))%>%
    mutate(age_at_time_period_end = as.numeric(param_time_period_end-date_birth))%>%
    
    #filter to age parameters
    filter(age_at_time_period_start>=param_animal_age_min)%>%
    filter(age_at_time_period_end<=param_animal_age_max)%>%
    
    #filter to existance within time period
    filter(!(date_left<param_time_period_start))
}

fxn_apply_global_params_lact<-function(df){
  df%>%
    filter(lact_number>=param_lactation_min)%>%
    filter(lact_number<=param_lactation_max)
}

#------------------------------------

```



### Create Base Files

```{r}
#get dates for exligibility logic based on milking or not-------------
animal_lactation_summary<-animal_lactations%>%
  group_by(id_animal)%>%
  summarize(date_start_milking = min(date_fresh, na.rm = T), 
         max_lactation_number = max(lact_number), 
         min_lactation_number = min(lact_number), 
         max_date_archive = max(date_archive))%>% #NA values in max date archive are active cows
  ungroup()

#create a cow level base file------------
deno_cow<-animals%>%
  left_join(animal_lactation_summary)%>%
  fxn_apply_global_params_animal() #filters out animals not meeting paramters

#create a lactation level base file ------------------------------
deno_lact<-animal_lactations%>%
  left_join(animal_lactation_summary)%>%
  left_join(animals)%>%
  mutate(flag_no_fresh_date = is.na(date_fresh))%>% #flag animals with no fresh date
  fxn_apply_global_params_animal()%>% #filters out animals not meeting paramters
  fxn_apply_global_params_lact() #filters out lactations not meeting parameters


#----------------------
check_flags<-deno_lact%>%filter(flag_no_fresh_date==TRUE)%>%
  mutate(floordate_year = floor_date(date_lact_first_event, unit = 'year'))%>%
  group_by(floordate_year)%>%
  summarize(ct = n_distinct(id_animal_lact))%>%
  ungroup()
check_flags

```



### Create Denominators

#### Cow level 
```{r, message = false}

list_dates<-sort(unique(calander$calander_date))
master_deno_cow<-NULL

#i=1000
for (i in seq_along(list_dates)){
  deno_cow2<-deno_cow%>%
    #lazy_dt()%>%
    mutate(ref_date = list_dates[i])%>%
    
    #get age at reference date and filter according to eligibilty
    mutate(age_at_ref_date = as.numeric(ref_date-date_birth))%>%
    filter(age_at_ref_date>=param_animal_age_min)%>%
    filter(age_at_ref_date<param_animal_age_max)%>%
    
    #remove animals that left
    mutate(date_left_lt_ref = case_when(
      is.na(date_left)~FALSE, 
      TRUE~date_left<ref_date
    ))%>%
    filter(date_left_lt_ref==FALSE)%>%
    
    #get grouping
    mutate(deno_group = case_when(
      #(max_lactation_number<1)~'Heifer',
      (min_lactation_number>0)~'Incomplete Life History', 
      TRUE~ 'Valid Animal')
      )%>%
    
    group_by(ref_date, deno_group)%>%
      summarize(animal_count = n_distinct(id_animal))%>%
      ungroup()#%>%
    #as_tibble()
  
  
  master_deno_cow<-bind_rows(master_deno_cow, deno_cow2)
  
  print(list_dates[i])
}

write_parquet(master_deno_cow, 'data/intermediate_files/denominator_by_day_cow.parquet')


```

#### Lactation level - any DIM
```{r, message = false}

list_dates<-sort(unique(calander$calander_date))
master_deno_lact<-NULL

#i=100
for (i in seq_along(list_dates)){
  deno_lact2<-deno_lact%>%
    #lazy_dt()%>%
    mutate(ref_date = list_dates[i])%>%
    
    #remove animals archived or left before ref date
    filter(!(date_archive<ref_date))%>%
    filter(!(date_left<ref_date))%>%
    
    #get age at reference date and filter according to eligibilty
    mutate(age_at_ref_date = as.numeric(ref_date-date_birth))%>%
    filter(age_at_ref_date>param_animal_age_min)%>%
    filter(age_at_ref_date<param_animal_age_max)%>%
    
    #lacation in progress on ref date
    mutate(fdat_valid = case_when(
      date_fresh<ref_date~'valid', 
      lact_number==0~'valid', 
      TRUE~'not valid')
      )%>%
    filter(fdat_valid %in% 'valid')%>%
    
      group_by(ref_date,  lact_group, fdat_valid)%>%
      summarize(animal_count = n_distinct(id_animal))%>%
      ungroup()#%>%
    #as_tibble()
  
  
  master_deno_lact<-bind_rows(master_deno_lact, deno_lact2)
  
  print(list_dates[i])
}

write_parquet(master_deno_lact, 'data/intermediate_files/denominator_by_day_lact.parquet')


```

#### Lactation level - DIM <60
```{r, message = false}

list_dates<-sort(unique(calander$calander_date))
master_deno_lact60<-NULL

#i=100
for (i in seq_along(list_dates)){
  deno_lact2<-deno_lact%>%
    filter(lact_number>0)%>%
    mutate(
      date_elig_start = date_fresh, 
      
      date_elig_end = case_when(
      is.na(date_archive)~data_pull_max,
      TRUE~date_dim60)
    )%>%
    
    #lazy_dt()%>%
    mutate(ref_date = list_dates[i])%>%
  
    filter(date_elig_start<=ref_date)%>%
    filter(date_elig_end>=ref_date)%>%
    
    #get counts
    group_by(ref_date,  lact_group)%>%
      summarize(animal_count = n_distinct(id_animal))%>%
      ungroup()#%>%
    #as_tibble()
  
  
  master_deno_lact60<-bind_rows(master_deno_lact60, deno_lact2)
  
  print(list_dates[i])
}

write_parquet(master_deno_lact60, 'data/intermediate_files/denominator_by_day_lact_dim_lt_60.parquet')


```



## Summarize Denominators

### Montly Deno
```{r}

fxn_summarize_deno<-function(df_grpd){
  df_grpd%>%
    summarize(ct_animals_mean = mean(animal_count), 
              ct_animals_median = median(animal_count),
              ct_animals_sd = sd(animal_count), 
              ct_animals_min = min(animal_count), 
              ct_animals_max = max(animal_count))%>%
    ungroup()%>%
    mutate(across(where(is.numeric), ~ round(., 0)))
}

#--------------------------------------------------------
deno_by_month_cow = master_deno_cow%>%
  mutate(floordate_month = floor_date(ref_date, 'month'))%>%
  group_by(floordate_month, deno_group)%>%
  fxn_summarize_deno()

deno_by_month_lact = master_deno_lact%>%
  mutate(floordate_month = floor_date(ref_date, 'month'))%>%
  group_by(floordate_month, lact_group, fdat_valid)%>%
  fxn_summarize_deno()

deno_by_month_lact60 = master_deno_lact60%>%
  mutate(floordate_month = floor_date(ref_date, 'month'))%>%
  group_by(floordate_month, lact_group)%>%
  fxn_summarize_deno()
            
 


```



