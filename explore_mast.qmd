---
title: "explore_mast"
editor: source
format: 
 html:
   embed-resources: true
   toc: true
   toc-location: left
execute:
    echo: false
    message: false
    warning: false
---

```{r}
library(tidyverse)
library(arrow)
library(dtplyr)
library(DT)

source('functions/DT_base.R') #functions to parse remarks and protocols

events_formatted<-read_parquet('data/intermediate_files/events_formatted.parquet') |> 
  filter(event %in% c("MAST", "CULTURE"))%>%
  filter(date_event > "2024-01-01")

summarize_events<-events_formatted |> 
  group_by(event, protocols_remaining_after_numbers1) |> 
  summarize(count_rows=sum(n()))|>
  ungroup()%>%
  mutate(event_type = factor(protocols_remaining_after_numbers1), 
         Event = factor(event))
```

# Mastitis by DIM

A summary of the total mastitis events distributed over DIM.

```{r}
library(ggplot2)
library(dplyr)

mast_dim <- events_formatted %>% 
  filter(event == "MAST") %>% 
  select(id_animal, event, dim_event, lact_group, protocols_remaining_after_letters1)  

graph <- ggplot(mast_dim, aes(x = dim_event)) +
  geom_histogram(binwidth = 10, fill = "steelblue", color = "black", alpha = 0.7) +
  theme_minimal(base_size = 14) +
  facet_wrap(vars(event), ncol = 1, scales = "free") +
  labs(
    title = "Distribution of Mastitis Events Over Days in Milk",
    x = "Days in Milk",
    y = "Count"
  ) +
  theme(
    panel.grid.major = element_line(color = "gray80"),
    panel.grid.minor = element_blank(),
    strip.text = element_text(size = 14, face = "bold")
  )

print(graph)
```

# Summary Graph of Mastitis by Protocol Used

Percentage of mastitis events that were treated by each protocol.

```{r}
library(ggplot2)
library(dplyr)
library(forcats)

# Filter for only Mastitis events within the last year
mastitis_events <- summarize_events %>%
  filter(event == "MAST")

# Compute the total count of all mastitis events (single scalar value)
total_mastitis <- sum(mastitis_events$count_rows)

# Compute percentage relative to total mastitis events
mastitis_events <- mastitis_events %>%
  mutate(percent = (count_rows / total_mastitis) * 100)  # Compute percentage

# Reorder event_type factor based on sum of count_rows
mastitis_events <- mastitis_events %>%
  mutate(event_type = fct_reorder(event_type, count_rows, .fun = sum, .desc = FALSE))

# Plot with percentages
ggplot(mastitis_events) +
  geom_bar(aes(x = event_type, y = percent, fill = event_type), stat = "identity") +
  coord_flip() +
  scale_fill_viridis_d() +
  theme_minimal() +
  labs(
    x = "",
    y = "Percentage of Total Mastitis Events (%)",
    title = "Distribution of Mastitis Events by Protocol"
  ) +
  theme(
    legend.position = "none"
  )
```

# Treatment Success

Re-treatment was defined as a new mastitis event occurring within 14 - 21 days of the first mastitis event. Events that were \> 60 days from the first event are considered "new" first treatments and subsequent events within 14 - 21 days later also count as re-treatments.

Cows that were initially treated with SpectraMastLC were retreated for mastitis 4.9%. Cows that were initially treated with AHV were retreated at a rate of 5.1%.

This program considers animals that were retreated within 14 days of the initial event as misidentified since they have not completed their treatment interval. These events did not count as a re-treatment.

```{r}
library(ggplot2)
library(dplyr)
library(stringr)

# Ensure date_event is in Date format
events_formatted <- events_formatted %>%
  mutate(date_event = as.Date(date_event))  # Convert if not already Date type

#Pull the wanted information into a new data set, only pull MAST events that used AHV or Spec
treatment_data <- events_formatted %>%
  filter(event %in% c("MAST", "CULTURE"), (str_starts(protocols_remaining_after_numbers1, "AHVmast") |
         str_starts(protocols_remaining_after_numbers1, "Spec"))) # Only relevant treatments
  
# Identify treatment periods where a new first event starts after 60 days
treatment_data <- treatment_data %>%
  arrange(id_animal, date_event) %>%  # Sort by animal and date
  group_by(id_animal) %>%
  mutate(
    prev_event_date = lag(date_event),
    days_since_last_event = as.numeric(date_event - prev_event_date),
    new_treatment_period = ifelse(is.na(days_since_last_event) | days_since_last_event > 60, 1, 0), 
    treatment_period = cumsum(new_treatment_period)  # Assign period ID
  ) %>%
  ungroup()

# Identify first treatment in each treatment period
treatment_data <- treatment_data %>%
  group_by(id_animal, treatment_period) %>%
  mutate(
    first_treatment = first(protocols_remaining_after_numbers1),  
    first_treatment_date = first(date_event)
  ) %>%
  ungroup()

# Identify retreatments within 14-21 days of the first treatment in the same treatment period
treatment_data <- treatment_data %>%
  arrange(id_animal, date_event) %>%
  group_by(id_animal, treatment_period) %>%
  mutate(
    prev_protocol = lag(protocols_remaining_after_numbers1),
    days_since_first_treatment = as.numeric(date_event - first_treatment_date),
    is_retreatment = ifelse(
      between(days_since_first_treatment, 14, 21) & prev_protocol == first_treatment, 
      TRUE, 
      FALSE
    )
  ) %>%
  ungroup()

# Create dataset with only valid retreatments
retreatment_data <- treatment_data %>%
  filter(is_retreatment == TRUE)

# Count retreatments by first treatment protocol
retreatment_counts <- retreatment_data %>%
  count(first_treatment, name = "retreatment_events") %>%
  rename(protocol = first_treatment)

# Count total first-time treatments
total_events <- treatment_data %>%
  filter(protocols_remaining_after_numbers1 == first_treatment) %>%
  count(first_treatment, name = "total_events") %>%
  rename(protocol = first_treatment)

# Merge total events with retreatments
retreatment_summary <- left_join(retreatment_counts, total_events, by = "protocol") %>%
  mutate(retreatment_percentage = (retreatment_events / total_events) * 100)

# Plot retreatment percentage per protocol
ggplot(retreatment_summary, aes(x = protocol, 
                                y = retreatment_percentage, 
                                fill = protocol)) +
  geom_bar(stat = "identity", width = 0.5, color = "black") +
  geom_text(aes(label = paste0(round(retreatment_percentage, 1), "%")),  
            vjust = -0.5, size = 3, fontface = "bold") +  
  scale_fill_manual(values = c("AHVmastitis" = "purple", "SpectraMastLC" = "pink")) +
  theme_minimal() +
  labs(
    title = "Retreatments as % of Total First Treatments by Protocol",
    x = "Treatment Protocol",
    y = "Retreatment Percentage (%)",
    fill = "Protocol"
  ) +
  theme(
    text = element_text(size = 12),
    legend.position = "top"
  )


```

# Treatment Success by Lactation Group

```{r}
library(dplyr)
library(ggplot2)
library(tidyr)  # Needed for replace_na()

# Count total treatments by lactation group
total_treatments_lact <- treatment_data %>%
  count(lact_group, name = "total_events")

# Count retreatments by lactation group within 14 days
retreatments_lact <- treatment_data %>%
  filter(is_retreatment == TRUE) %>%
  count(lact_group, name = "retreatment_events")

# Merge datasets & calculate retreatment percentage
retreatment_rates <- left_join(retreatments_lact, total_treatments_lact, by = "lact_group") %>%
  mutate(
    retreatment_events = replace_na(retreatment_events, 0),  # Handle missing values
    retreatment_percentage_lact = (retreatment_events / total_events) * 100
  )

# Plot retreatment rates by lactation group
ggplot(retreatment_rates, aes(x = factor(lact_group),  
                              y = retreatment_percentage_lact, 
                              fill = factor(lact_group))) +
  geom_bar(stat = "identity", position = "dodge", width = 0.6, color = "black") +  
  geom_text(aes(label = paste0(round(retreatment_percentage_lact, 1), "%")), 
            position = position_dodge(0.6), vjust = -0.5, size = 3, fontface = "bold") +  
  scale_fill_manual(values = c("LACT 1" = "yellow", "LACT 2" = "green", "LACT 3+" = "cyan")) +  
  theme_minimal() +
  labs(
    title = "Retreatment Rates by Lactation Group",
    x = "Lactation Group",
    y = "Retreatment Percentage (%)",
    fill = "Lactation Group"
  ) +
  theme(
    text = element_text(size = 12),
    legend.position = "top"
  )

```

# Treatment Success by Lactation Group and Protocol

```{r}
library(dplyr)
library(ggplot2)

# Count total treatments by protocol & lactation group
total_treatments <- treatment_data %>%
  count(protocols_remaining_after_numbers1, lact_group, name = "total_events")

# Count retreatments by protocol & lactation group (within 14 days)
retreatments <- treatment_data %>%
  filter(is_retreatment == TRUE) %>%
  count(protocols_remaining_after_numbers1, lact_group, name = "retreatment_events")

# Merge datasets & calculate retreatment percentage
retreatment_rates <- left_join(retreatments, total_treatments, 
                               by = c("protocols_remaining_after_numbers1", "lact_group")) %>%
  mutate(retreatment_percentage = (retreatment_events / total_events) * 100)

ggplot(retreatment_rates, aes(x = factor(lact_group),  # Lactation group as categorical
                              y = retreatment_percentage, 
                              fill = protocols_remaining_after_numbers1)) +
  geom_bar(stat = "identity", position = "dodge", width = 0.6, color = "black") +  
  geom_text(aes(label = paste0(round(retreatment_percentage, 1), "%")), 
            position = position_dodge(0.6), vjust = -0.5, size = 3, fontface = "bold") +  
  scale_fill_manual(values = c("AHVmastitis" = "steelblue", "SpectraMastLC" = "forestgreen")) +  
  theme_minimal() +
  labs(
    title = "Retreatment Rates by Lactation Group & Protocol",
    x = "Lactation Group",
    y = "Retreatment Percentage (%)",
    fill = "Treatment Protocol"
  ) +
  theme(
    text = element_text(size = 14),
    legend.position = "top"
  )


```

# Survival Curve by Protocol

```{r}
library(survival)
library(survminer)
library(dplyr)
library(stringr)

# Create protocol labels
treatment_data <- treatment_data %>%
  mutate(
    protocol_label = case_when(
      str_starts(protocols_remaining_after_numbers1, "AHV") ~ "AHV",
      str_starts(protocols_remaining_after_numbers1, "Spec") ~ "SpectraMastLC",
      TRUE ~ NA_character_
    )
  ) %>%
  filter(!is.na(protocol_label))  # Keep only relevant treatments

# Find cows that have an exit event (SOLD or DIED)
exit_cows <- treatment_data %>%
  filter(event %in% c("SOLD", "DIED")) %>%
  group_by(id_animal) %>%
  summarise(date_exit = min(date_event, na.rm = TRUE)) %>%
  ungroup()

# Merge exit dates back into the dataset
treatment_data <- treatment_data %>%
  left_join(exit_cows, by = "id_animal") %>%
  mutate(
    days_until_exit = as.numeric(date_exit - date_event),
    event_occurred = ifelse(!is.na(date_exit), 1, 0)  # 1 if cow left, 0 if censored
  )

# Keep only mastitis cases treated with AHV or SpectraMastLC
final_mastitis_data <- treatment_data %>%
  filter(
    event == "MAST",
    protocol_label %in% c("AHV", "SpectraMastLC")
  )

# Fit Kaplan-Meier survival model
fitKM <- survfit(Surv(days_until_exit, event_occurred) ~ protocol_label, data = final_mastitis_data)

# Create a Kaplan-Meier survival plot using 'ggsurvplot'
# most of this makes them pretty.
# you can just run the first line and it will create a graph)
# km <- ggsurvplot(fitKM, 
#                  pval = FALSE, 
#                  ncol = 2,
#                  conf.int = TRUE,
#                  censor = FALSE,
#                  fun = "pct",
#                  size = 1,
#                  linetype = c(1, 2, 3), # Specify dashed lines for each group
#                  palette = c("#440154ff", "#3b528bff", "#fde725ff"),
#                  legend = "bottom",
#                  legend.title = "Lactation",
#                  legend.labs = lact.labs,
#                  xlab = "Days to Lameness after Treatment",
#                  ylab = "Percentage of Healthy Cows",
#                  xlim = c(0, 180),
#                  ylim = c(50, 100),
#                  break.time.by = 30,
#                  short.panel.labs = TRUE) 
  # Set the fill colors and linetypes for each group in the legend and overide
  # the default where lines and colours are separate
  # to get codes library(RColorBrewer) brewer.pal(n=5,"Accent")
 

# this creates a table to illustrate graph above, 
# creates predicted risk of culling at time point X

# time to mast table----

# fit_farm <- survfit(Surv(censordat, nextrmlame) ~ lctgp, 
#                     data = trimtolame)
# 
# # farm
# tbl_time_2_lame_farm <- tbl_survfit(fit_farm,
#                                     times = c(90, 120, 150, 180),
#                                     label = " ",
#                                     reverse = TRUE,
#                                     label_header = "{time} Days") %>% 
#   as_flex_table() %>% # makes formatting and pdf better
#   add_header_row(top = TRUE,
#                  values = c("Protocol",
#                             "Days",
#                             "",
#                             "",
#                             "")) %>% 
#   bold(i = 1, bold = TRUE, part = "header") %>% # bolds headers
#   bold(i = 2, bold = TRUE, part = "header") %>% 
#   merge_at(i = 1:2, j = 1, part = "header") %>% #merges 1st row
#   merge_at(i = 1, j = 2:5, part = "header") %>% # merges top columns
#   autofit() %>% 
#   fit_to_width(max_width= 6) |> 
#   delete_rows( i= 1, part = "body") |> 
#   hline_bottom(part = "body")
```
